type Subscription {
  # A note on user context
  # There's not a reliable way to pass a JWT through web sockets so the best solution
  # is to pass in the JWT as an argument, decode it within the resolver, init
  # any connectors that require a decoded JWT and move on.


  # Subs current users to events emitted by assistant
  # Publishes messages, ui updates, redirects, typing indicator, etc
  assistant(jwt: String!): AssistantEvent!
  # Trusting an anonymous ID argument poses a security risk.
  # If you get a hold of an anonymous ID you can pass it to the GQL server
  # and receive the messages related to it. A possible solution is to generate
  # an anonymous JWT to derive the anonymous ID from. Though, if you can get a
  # hold of the anonymous ID you can probably get a hold of the anonymous JWT.

  # Subscribes current user to a chat channel
  # Publishes everything but new messages, with the exception of the latest message.
  # This is used for notifications when the user doesn't have the channel open.
  channel(channelId: ID!): Channel!

  # Subscribes the current user to messages within a certain chat channel
  # Publishes messages in a RTE wrapper
  # This is used for a channel that is open and the assistant.
  messages(jwt: String!, channelId: ID!): Message!
}

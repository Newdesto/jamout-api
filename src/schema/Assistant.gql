interface AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
}

type AssistantMessage implements AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
  sender: String! # enum ASSISTANT=a, USER=u
  isAnon: Boolean
  text: String
  title: String
  subtitle: String
  buttons: [MessageButton!]
  contexts: MessageContexts
  messenger: MessengerMessage

}

type MessageButton {
  text: String
  postback: String
}

type MessageContexts {
  name: String!,
  lifespan: Int!,
  parameters: JSON!
}

type MessengerMessage {
  text: String!
}

input AssistantMessageInput {
  text: String!
}

type AssistantTyping implements AssistantEvent{
  createdAt: String!
  id: ID!
  type: String! # typing.start, typing.stop
  userId: ID!
}



type AssistantRedirect implements AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
  route: String!
}

input AssistantContextInput {
  route: String
}

input AssistantInput {
  # The component which this input came from.
  component: String!
  # An ISO-8601 formatted date
  createdAt: String!
  # An open ended object of values
  values: JSON!
  # The content of the message. If content is
  # null we don't persist the message.
  content: String
  # The content type of the message
  contentType: String
  # Context to be sent with the API.ai query.
  # @TODO verify the JSON structure before sending.
  context: JSON
  # Event to be sent with the API.ai query.
  # @TODO verify the JSON structure before sending.
  # An event has a priority over a text query.
  event: JSON
}

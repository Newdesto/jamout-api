interface AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
}

type AssistantMessage implements AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
  sender: String! # enum ASSISTANT=a, USER=u
  isAnon: Boolean
  text: String
  title: String
  subtitle: String
  buttons: [MessageButton!]
  contexts: MessageContexts
  messenger: MessengerMessage

}

type MessageButton {
  text: String
  postback: String
}

type MessageContexts {
  name: String!,
  lifespan: Int!,
  parameters: JSON!
}

type MessengerMessage {
  text: String!
}

input AssistantMessageInput {
  text: String!
}

type AssistantTyping implements AssistantEvent{
  createdAt: String!
  id: ID!
  type: String! # typing.start, typing.stop
  userId: ID!
}

type AssistantInput implements AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
  input: String!
  inputHint: String
}

type AssistantRedirect implements AssistantEvent {
  createdAt: String!
  id: ID!
  type: String!
  userId: ID!
  route: String!
}

input AssistantContextInput {
  route: String
}
